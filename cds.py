import os
import shelve
import time
import PySimpleGUI as sg
from typing import Tuple
from psgtray import SystemTray
from dataclasses import dataclass
from pathlib import Path
from pynput import mouse, keyboard
from math import sqrt, fabs


@dataclass
class Model:
    num_keystrokes: int = 0
    num_mouse_clicks: int = 0
    length_mouse_track: float = 0.
    prev_mouse_loc: Tuple[int, int] = None
    time_tick: float = 0.
    move_period: float = 0.1


def get_icon():
    return b''


class Controller:

    def __init__(self) -> None:
        menu = ['', ['Exit']]

        layout = [[sg.T('Empty Window', key='-T-')]]

        self.window = sg.Window('Window Title', layout, finalize=True, enable_close_attempted_event=True, alpha_channel=0)
        self.window.hide()

        self.tray = SystemTray(menu, single_click_events=False, window=self.window, tooltip='---', icon=get_icon(), key='-TRAY-')
        
        self.db_file, self.stat = self._init_model()

    @staticmethod
    def _init_model():
        username = os.getlogin()
        db_loc = Path.home() / "daily_stroke_counter"
        db_loc.mkdir(parents=True, exist_ok=True)
        db_path = db_loc / ".database"
        db_file = shelve.open(str(db_path), writeback=True)
        userstat = db_file.get(username, Model())
        userstat.time_tick = time.time()
        return db_file, userstat

    def run(self):
        while True:
            event, values = self.window.read(timeout=1000)

            self.sync()
            
            if event == self.tray.key:
                event = values[event]

            if event in (sg.WIN_CLOSED, 'Exit'):
                break

        self.db_file.close()
        self.tray.close()
        self.window.close()

    def sync(self):
        text = f"K:{self.stat.num_keystrokes}\nM:{self.stat.num_mouse_clicks}\nL:{self.stat.length_mouse_track:.0f}"
        self.tray.set_tooltip(text)
        self.db_file.sync()


ctrl = Controller()


def on_move(nx, ny):
    now = time.time()
    if ctrl.stat.prev_mouse_loc is not None and \
        now - ctrl.stat.time_tick > ctrl.stat.move_period:
        px, py = ctrl.stat.prev_mouse_loc
        ctrl.stat.length_mouse_track += sqrt((px-nx)*(px-nx) + (py-ny)*(py-ny))
        ctrl.stat.time_tick = now
    ctrl.stat.prev_mouse_loc = (nx, ny)


def on_click(x, y, button, pressed):
    if not pressed:
        ctrl.stat.num_mouse_clicks += 1


def on_scroll(x, y, dx, dy):
    ctrl.stat.num_mouse_clicks += (fabs(dx) + fabs(dy))


def on_press(key):
    ctrl.stat.num_keystrokes += 1


keyboard_listener = keyboard.Listener(
    on_press=on_press)


mouse_listener = mouse.Listener(
    on_move=on_move,
    on_click=on_click,
    on_scroll=on_scroll)


keyboard_listener.start()
mouse_listener.start()
ctrl.run()
keyboard_listener.stop()
mouse_listener.stop()
keyboard_listener.join()
mouse_listener.join()
